{
  "$defs": {
    "helm-values": {
      "additionalProperties": false,
      "properties": {
        "affinity": {
          "$ref": "#/$defs/helm-values.affinity"
        },
        "app": {
          "$ref": "#/$defs/helm-values.app"
        },
        "commonLabels": {
          "$ref": "#/$defs/helm-values.commonLabels"
        },
        "global": {
          "$ref": "#/$defs/helm-values.global"
        },
        "image": {
          "$ref": "#/$defs/helm-values.image"
        },
        "imagePullSecrets": {
          "$ref": "#/$defs/helm-values.imagePullSecrets"
        },
        "nodeSelector": {
          "$ref": "#/$defs/helm-values.nodeSelector"
        },
        "openshift": {
          "$ref": "#/$defs/helm-values.openshift"
        },
        "priorityClassName": {
          "$ref": "#/$defs/helm-values.priorityClassName"
        },
        "tolerations": {
          "$ref": "#/$defs/helm-values.tolerations"
        },
        "topologySpreadConstraints": {
          "$ref": "#/$defs/helm-values.topologySpreadConstraints"
        }
      },
      "type": "object"
    },
    "helm-values.affinity": {
      "default": {},
      "description": "Kubernetes affinity: constraints for pod assignment.\n\nFor example:\naffinity:\n  nodeAffinity:\n   requiredDuringSchedulingIgnoredDuringExecution:\n     nodeSelectorTerms:\n     - matchExpressions:\n       - key: foo.bar.com/role\n         operator: In\n         values:\n         - master",
      "type": "object"
    },
    "helm-values.app": {
      "additionalProperties": false,
      "properties": {
        "approver": {
          "$ref": "#/$defs/helm-values.app.approver"
        },
        "certificateRequestDuration": {
          "$ref": "#/$defs/helm-values.app.certificateRequestDuration"
        },
        "driver": {
          "$ref": "#/$defs/helm-values.app.driver"
        },
        "extraCertificateRequestAnnotations": {
          "$ref": "#/$defs/helm-values.app.extraCertificateRequestAnnotations"
        },
        "issuer": {
          "$ref": "#/$defs/helm-values.app.issuer"
        },
        "logLevel": {
          "$ref": "#/$defs/helm-values.app.logLevel"
        },
        "name": {
          "$ref": "#/$defs/helm-values.app.name"
        },
        "runtimeIssuanceConfigMap": {
          "$ref": "#/$defs/helm-values.app.runtimeIssuanceConfigMap"
        },
        "trustDomain": {
          "$ref": "#/$defs/helm-values.app.trustDomain"
        }
      },
      "type": "object"
    },
    "helm-values.app.approver": {
      "additionalProperties": false,
      "properties": {
        "metrics": {
          "$ref": "#/$defs/helm-values.app.approver.metrics"
        },
        "readinessProbe": {
          "$ref": "#/$defs/helm-values.app.approver.readinessProbe"
        },
        "replicaCount": {
          "$ref": "#/$defs/helm-values.app.approver.replicaCount"
        },
        "resources": {
          "$ref": "#/$defs/helm-values.app.approver.resources"
        },
        "signerName": {
          "$ref": "#/$defs/helm-values.app.approver.signerName"
        }
      },
      "type": "object"
    },
    "helm-values.app.approver.metrics": {
      "additionalProperties": false,
      "properties": {
        "port": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.port"
        },
        "service": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service"
        }
      },
      "type": "object"
    },
    "helm-values.app.approver.metrics.port": {
      "default": 9402,
      "description": "Port for exposing Prometheus metrics on 0.0.0.0 on path '/metrics'.",
      "type": "number"
    },
    "helm-values.app.approver.metrics.service": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.enabled"
        },
        "servicemonitor": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor"
        },
        "type": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.type"
        }
      },
      "type": "object"
    },
    "helm-values.app.approver.metrics.service.enabled": {
      "default": true,
      "description": "Create a Service resource to expose metrics endpoint.",
      "type": "boolean"
    },
    "helm-values.app.approver.metrics.service.servicemonitor": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor.enabled"
        },
        "interval": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor.interval"
        },
        "labels": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor.labels"
        },
        "prometheusInstance": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor.prometheusInstance"
        },
        "scrapeTimeout": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor.scrapeTimeout"
        }
      },
      "type": "object"
    },
    "helm-values.app.approver.metrics.service.servicemonitor.enabled": {
      "default": false,
      "description": "Create Prometheus ServiceMonitor resource for cert-manager-csi-driver-spiffe approver.",
      "type": "boolean"
    },
    "helm-values.app.approver.metrics.service.servicemonitor.interval": {
      "default": "10s",
      "description": "The interval that the Prometheus will scrape for metrics.",
      "type": "string"
    },
    "helm-values.app.approver.metrics.service.servicemonitor.labels": {
      "default": {},
      "description": "Additional labels to give the ServiceMonitor resource.",
      "type": "object"
    },
    "helm-values.app.approver.metrics.service.servicemonitor.prometheusInstance": {
      "default": "default",
      "description": "The value for the \"prometheus\" label on the ServiceMonitor. This allows for multiple Prometheus instances selecting difference ServiceMonitors using label selectors.",
      "type": "string"
    },
    "helm-values.app.approver.metrics.service.servicemonitor.scrapeTimeout": {
      "default": "5s",
      "description": "The timeout on each metric probe request.",
      "type": "string"
    },
    "helm-values.app.approver.metrics.service.type": {
      "default": "ClusterIP",
      "description": "Service type to expose metrics.",
      "type": "string"
    },
    "helm-values.app.approver.readinessProbe": {
      "additionalProperties": false,
      "properties": {
        "port": {
          "$ref": "#/$defs/helm-values.app.approver.readinessProbe.port"
        }
      },
      "type": "object"
    },
    "helm-values.app.approver.readinessProbe.port": {
      "default": 6060,
      "description": "Container port to expose csi-driver-spiffe-approver HTTP readiness probe on default network interface.",
      "type": "number"
    },
    "helm-values.app.approver.replicaCount": {
      "default": 1,
      "description": "Number of replicas of the approver to run.",
      "type": "number"
    },
    "helm-values.app.approver.resources": {
      "default": {},
      "description": "Kubernetes pod resource limits for cert-manager-csi-driver-spiffe approver\n\nFor example:\nresources:\n  limits:\n    cpu: 100m\n    memory: 128Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi",
      "type": "object"
    },
    "helm-values.app.approver.signerName": {
      "default": "",
      "description": "A signer name that the csi-driver-spiffe approver will be given permission to approve and deny. CertificateRequests referencing this signer name can be processed by the SPIFFE approver. See: https://cert-manager.io/docs/concepts/certificaterequest/#approval. Defaults to empty which allows approval for all signers",
      "type": "string"
    },
    "helm-values.app.certificateRequestDuration": {
      "default": "1h",
      "description": "Duration requested for requested certificates.",
      "type": "string"
    },
    "helm-values.app.driver": {
      "additionalProperties": false,
      "properties": {
        "csiDataDir": {
          "$ref": "#/$defs/helm-values.app.driver.csiDataDir"
        },
        "livenessProbe": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbe"
        },
        "livenessProbeImage": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbeImage"
        },
        "nodeDriverRegistrarImage": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage"
        },
        "resources": {
          "$ref": "#/$defs/helm-values.app.driver.resources"
        },
        "sourceCABundle": {
          "$ref": "#/$defs/helm-values.app.driver.sourceCABundle"
        },
        "volumeFileName": {
          "$ref": "#/$defs/helm-values.app.driver.volumeFileName"
        },
        "volumeMounts": {
          "$ref": "#/$defs/helm-values.app.driver.volumeMounts"
        },
        "volumes": {
          "$ref": "#/$defs/helm-values.app.driver.volumes"
        }
      },
      "type": "object"
    },
    "helm-values.app.driver.csiDataDir": {
      "default": "/tmp/cert-manager-csi-driver",
      "description": "Configures the hostPath directory that the driver will write and mount volumes from.",
      "type": "string"
    },
    "helm-values.app.driver.livenessProbe": {
      "additionalProperties": false,
      "properties": {
        "port": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbe.port"
        }
      },
      "type": "object"
    },
    "helm-values.app.driver.livenessProbe.port": {
      "default": 9809,
      "description": "The port that will expose the liveness of the csi-driver",
      "type": "number"
    },
    "helm-values.app.driver.livenessProbeImage": {
      "additionalProperties": false,
      "properties": {
        "digest": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbeImage.digest"
        },
        "pullPolicy": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbeImage.pullPolicy"
        },
        "registry": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbeImage.registry"
        },
        "repository": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbeImage.repository"
        },
        "tag": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbeImage.tag"
        }
      },
      "type": "object"
    },
    "helm-values.app.driver.livenessProbeImage.digest": {
      "description": "Target image digest. Override any tag, if set.\nFor example:\ndigest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20",
      "type": "string"
    },
    "helm-values.app.driver.livenessProbeImage.pullPolicy": {
      "default": "IfNotPresent",
      "description": "Kubernetes imagePullPolicy on liveness probe.",
      "type": "string"
    },
    "helm-values.app.driver.livenessProbeImage.registry": {
      "description": "Target image registry. This value is prepended to the target image repository, if set.\nFor example:\nregistry: registry.k8s.io\nrepository: sig-storage/livenessprobe",
      "type": "string"
    },
    "helm-values.app.driver.livenessProbeImage.repository": {
      "default": "registry.k8s.io/sig-storage/livenessprobe",
      "description": "Target image repository.",
      "type": "string"
    },
    "helm-values.app.driver.livenessProbeImage.tag": {
      "default": "v2.17.0@sha256:9b75b9ade162136291d5e8f13a1dfc3dec71ee61419b1bfc112e0796ff8a6aa9",
      "description": "Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion is used.",
      "type": "string"
    },
    "helm-values.app.driver.nodeDriverRegistrarImage": {
      "additionalProperties": false,
      "properties": {
        "digest": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage.digest"
        },
        "pullPolicy": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage.pullPolicy"
        },
        "registry": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage.registry"
        },
        "repository": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage.repository"
        },
        "tag": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage.tag"
        }
      },
      "type": "object"
    },
    "helm-values.app.driver.nodeDriverRegistrarImage.digest": {
      "description": "Target image digest. Override any tag, if set.\nFor example:\ndigest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20",
      "type": "string"
    },
    "helm-values.app.driver.nodeDriverRegistrarImage.pullPolicy": {
      "default": "IfNotPresent",
      "description": "Kubernetes imagePullPolicy on node-driver.",
      "type": "string"
    },
    "helm-values.app.driver.nodeDriverRegistrarImage.registry": {
      "description": "Target image registry. This value is prepended to the target image repository, if set.\nFor example:\nregistry: registry.k8s.io\nrepository: sig-storage/csi-node-driver-registrar",
      "type": "string"
    },
    "helm-values.app.driver.nodeDriverRegistrarImage.repository": {
      "default": "registry.k8s.io/sig-storage/csi-node-driver-registrar",
      "description": "Target image repository.",
      "type": "string"
    },
    "helm-values.app.driver.nodeDriverRegistrarImage.tag": {
      "default": "v2.14.0@sha256:5244abbe87e01b35adeb8bb13882a74785df0c0619f8325c9e950395c3f72a97",
      "description": "Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion is used.",
      "type": "string"
    },
    "helm-values.app.driver.resources": {
      "default": {},
      "description": "Kubernetes pod resource limits for cert-manager-csi-driver-spiffe\n\nFor example:\nresources:\n  limits:\n    cpu: 100m\n    memory: 128Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi",
      "type": "object"
    },
    "helm-values.app.driver.sourceCABundle": {
      "description": "Optional file containing a CA bundle that will be propagated to managed volumes."
    },
    "helm-values.app.driver.volumeFileName": {
      "additionalProperties": false,
      "properties": {
        "ca": {
          "$ref": "#/$defs/helm-values.app.driver.volumeFileName.ca"
        },
        "cert": {
          "$ref": "#/$defs/helm-values.app.driver.volumeFileName.cert"
        },
        "key": {
          "$ref": "#/$defs/helm-values.app.driver.volumeFileName.key"
        }
      },
      "type": "object"
    },
    "helm-values.app.driver.volumeFileName.ca": {
      "default": "ca.crt",
      "description": "File name where the CA bundles are written to, if enabled.",
      "type": "string"
    },
    "helm-values.app.driver.volumeFileName.cert": {
      "default": "tls.crt",
      "description": "File name which signed certificates are written to in volumes.",
      "type": "string"
    },
    "helm-values.app.driver.volumeFileName.key": {
      "default": "tls.key",
      "description": "File name which private keys are written to in volumes.",
      "type": "string"
    },
    "helm-values.app.driver.volumeMounts": {
      "default": [],
      "description": "Optional extra volume mounts. Useful for mounting root CAs\n\nFor example:\nvolumeMounts:\n- name: root-cas\n  mountPath: /var/run/secrets/cert-manager-csi-driver-spiffe",
      "items": {},
      "type": "array"
    },
    "helm-values.app.driver.volumes": {
      "default": [],
      "description": "Optional extra volumes. Useful for mounting root CAs\n\nFor example:\nvolumes:\n- name: root-cas\n  secret:\n    secretName: root-ca-bundle",
      "items": {},
      "type": "array"
    },
    "helm-values.app.extraCertificateRequestAnnotations": {
      "description": "List of annotations to add to certificate requests\n\nFor example:\nextraCertificateRequestAnnotations: app=csi-driver-spiffe,foo=bar"
    },
    "helm-values.app.issuer": {
      "additionalProperties": false,
      "properties": {
        "group": {
          "$ref": "#/$defs/helm-values.app.issuer.group"
        },
        "kind": {
          "$ref": "#/$defs/helm-values.app.issuer.kind"
        },
        "name": {
          "$ref": "#/$defs/helm-values.app.issuer.name"
        }
      },
      "type": "object"
    },
    "helm-values.app.issuer.group": {
      "default": "cert-manager.io",
      "description": "Issuer group which is used to serve this Trust Domain.",
      "type": "string"
    },
    "helm-values.app.issuer.kind": {
      "default": "ClusterIssuer",
      "description": "Issuer kind which is used to serve this Trust Domain.",
      "type": "string"
    },
    "helm-values.app.issuer.name": {
      "default": "spiffe-ca",
      "description": "Issuer name which is used to serve this Trust Domain.",
      "type": "string"
    },
    "helm-values.app.logLevel": {
      "default": 1,
      "description": "Verbosity of cert-manager-csi-driver logging.",
      "type": "number"
    },
    "helm-values.app.name": {
      "default": "spiffe.csi.cert-manager.io",
      "description": "The name for the CSI driver installation.",
      "type": "string"
    },
    "helm-values.app.runtimeIssuanceConfigMap": {
      "default": "",
      "description": "Name of a ConfigMap in the installation namespace to watch, providing runtime configuration of an issuer to use.\n\nThe \"issuer-name\", \"issuer-kind\" and \"issuer-group\" keys must be present in the ConfigMap for it to be used.",
      "type": "string"
    },
    "helm-values.app.trustDomain": {
      "default": "cluster.local",
      "description": "The Trust Domain for this driver.",
      "type": "string"
    },
    "helm-values.commonLabels": {
      "default": {},
      "description": "Labels to apply to all resources",
      "type": "object"
    },
    "helm-values.global": {
      "description": "Global values shared across all (sub)charts"
    },
    "helm-values.image": {
      "additionalProperties": false,
      "properties": {
        "digest": {
          "$ref": "#/$defs/helm-values.image.digest"
        },
        "pullPolicy": {
          "$ref": "#/$defs/helm-values.image.pullPolicy"
        },
        "registry": {
          "$ref": "#/$defs/helm-values.image.registry"
        },
        "repository": {
          "$ref": "#/$defs/helm-values.image.repository"
        },
        "tag": {
          "$ref": "#/$defs/helm-values.image.tag"
        }
      },
      "type": "object"
    },
    "helm-values.image.digest": {
      "additionalProperties": false,
      "default": {},
      "properties": {
        "approver": {
          "$ref": "#/$defs/helm-values.image.digest.approver"
        },
        "driver": {
          "$ref": "#/$defs/helm-values.image.digest.driver"
        }
      },
      "type": "object"
    },
    "helm-values.image.digest.approver": {
      "description": "Target csi-driver approver digest. Override any tag, if set.\nFor example:\napprover: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20",
      "type": "string"
    },
    "helm-values.image.digest.driver": {
      "description": "Target csi-driver driver digest. Override any tag, if set.\nFor example:\ndriver: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20",
      "type": "string"
    },
    "helm-values.image.pullPolicy": {
      "default": "IfNotPresent",
      "description": "Kubernetes imagePullPolicy on DaemonSet.",
      "type": "string"
    },
    "helm-values.image.registry": {
      "description": "Target image registry. This value is prepended to the target image repository, if set.\nFor example:\nregistry: quay.io\nrepository:\n  driver: jetstack/cert-manager-csi-driver-spiffe\n  approver: jetstack/cert-manager-csi-driver-spiffe-approver",
      "type": "string"
    },
    "helm-values.image.repository": {
      "additionalProperties": false,
      "properties": {
        "approver": {
          "$ref": "#/$defs/helm-values.image.repository.approver"
        },
        "driver": {
          "$ref": "#/$defs/helm-values.image.repository.driver"
        }
      },
      "type": "object"
    },
    "helm-values.image.repository.approver": {
      "default": "quay.io/jetstack/cert-manager-csi-driver-spiffe-approver",
      "description": "Target image repository for the csi-driver approver Deployment.",
      "type": "string"
    },
    "helm-values.image.repository.driver": {
      "default": "quay.io/jetstack/cert-manager-csi-driver-spiffe",
      "description": "Target image repository for the csi-driver driver DaemonSet.",
      "type": "string"
    },
    "helm-values.image.tag": {
      "description": "Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion is used.",
      "type": "string"
    },
    "helm-values.imagePullSecrets": {
      "default": [],
      "description": "Optional secrets used for pulling the csi-driver-spiffe and csi-driver-spiffe-approver container images\n\nFor example:\nimagePullSecrets:\n- name: secret-name",
      "items": {},
      "type": "array"
    },
    "helm-values.nodeSelector": {
      "default": {
        "kubernetes.io/os": "linux"
      },
      "description": "Kubernetes node selector: node labels for pod assignment.",
      "type": "object"
    },
    "helm-values.openshift": {
      "additionalProperties": false,
      "properties": {
        "securityContextConstraint": {
          "$ref": "#/$defs/helm-values.openshift.securityContextConstraint"
        }
      },
      "type": "object"
    },
    "helm-values.openshift.securityContextConstraint": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "$ref": "#/$defs/helm-values.openshift.securityContextConstraint.enabled"
        },
        "name": {
          "$ref": "#/$defs/helm-values.openshift.securityContextConstraint.name"
        }
      },
      "type": "object"
    },
    "helm-values.openshift.securityContextConstraint.enabled": {
      "default": "detect",
      "description": "Include RBAC to allow the DaemonSet to \"use\" the specified\nSecurityContextConstraints.\n\nThis value can either be a boolean true or false, or the string \"detect\". If set to \"detect\" then the securityContextConstraint is automatically enabled for openshift installs."
    },
    "helm-values.openshift.securityContextConstraint.name": {
      "default": "privileged",
      "description": "Name of the SecurityContextConstraints to create RBAC for.",
      "type": "string"
    },
    "helm-values.priorityClassName": {
      "default": "",
      "description": "Optional priority class to be used for the csi-driver pods.",
      "type": "string"
    },
    "helm-values.tolerations": {
      "default": [],
      "description": "Kubernetes pod tolerations for cert-manager-csi-driver-spiffe.\n\nFor example:\ntolerations:\n- key: foo.bar.com/role\n  operator: Equal\n  value: master\n  effect: NoSchedule",
      "items": {},
      "type": "array"
    },
    "helm-values.topologySpreadConstraints": {
      "default": [],
      "description": "List of Kubernetes TopologySpreadConstraints.\n\nFor example:\ntopologySpreadConstraints:\n- maxSkew: 2\n  topologyKey: topology.kubernetes.io/zone\n  whenUnsatisfiable: ScheduleAnyway\n  labelSelector:\n    matchLabels:\n      app.kubernetes.io/instance: cert-manager\n      app.kubernetes.io/component: controller",
      "items": {},
      "type": "array"
    }
  },
  "$ref": "#/$defs/helm-values",
  "$schema": "http://json-schema.org/draft-07/schema#"
}
